===================================================
QUICK START GUIDE FOR FINDING ARRAY PERFORMANCE
C:>workon beta3
// In this script we will be exploring what performance information is available in an Array server. We will be using the ArrayMock.
C:>pywbemcli -o table --name ArrayMock
// In SMI-S 1.8.0 AdvanceMetrics was defined for storage Arrays. We can determine if our Mock Array supports this by inspecting
// the CIM_BlockStatisticsCapabilities. Specifically, the SupportedFeatures property will include the value "6".
// So, let's get the performance capabilities. We will do this with two requests for readability.
instance enumerate CIM_BlockStatisticsCapabilities --pl InstanceID,ElementTypesSupported,SupportedFeatures
// In this requests we see SupportedFeatures does, indeed, contain the value "6" (as well as the value "3"). We also see that statistics
// are being kept for the Array itself, the front end port, storage volume and disk drive elements.
// Next we will see what other capabilities are supported.
instance enumerate CIM_BlockStatisticsCapabilities --pl InstanceID,SynchronousMethodsSupported,ClockTickInterval
// We see that the methods supported are GetStatisticsCollection, Manifest Creation, Manifest Modification and Manifest Removal. And
// we see that the implementation has a clock tick interval of 100000 microseconds.
// Next we will look for what the BlockStatisticsCapabilities apply to
instance shrub CIM_BlockStatisticsCapabilities.?
// And we see it applies to an instance of CIM_BlockStatisticsService.
// So, let's get the related service.
instance enumerate CIM_BlockStatisticsService --pl Name,EnabledDefault,EnabledState,RequestedState,Started,TransitioningToState
// We see that both the EnabledState and the EnabledDefault is Enabled and RequestedState and TransitioningToState are not applicable.
// In terms of finding the statistics there are a couple of approaches to take. You could start with an element for which statistics
// are kept. But a more straightforward approach is to find the StatisticCollection.
instance enumerate CIM_StatisticsCollection
// The statistics collection identifies the sample interval and the last time they statistics were collected.
// Next we need to inspect the shrub for the Statistics Collection.
-o mof instance shrub CIM_StatisticsCollection.?
// We see that there are three associations to other elements. There is a CIM_AssociatedBlockStatisticsManifestCollection to a 
// CIM_BlockStatisticsManifestCollection. There is a CIM_HostedCollection to a CIM_ComputerSystem. And there is a
// CIM_MemberOfCollection to a bunch of instances of CIM_BlockStorageStatisticalData. These instances contain the statistic data
// for the element types identified in the CIM_BlockStatisticsCapabilities.
// We will start by looking at the instances of CIM_BlockStorageStatisticalData. We will look at one instance of each element type,
// starting with the Array. To illustrate what the Advanced Metrics offers, I will run two requests for each element type. The first
// retrieves the basic statistics and the second retreives the advanced statistics.
// For the Array (type 2) we have:
instance get CIM_BlockStorageStatisticalData.? --pl InstanceID,ElementType,StatisticTime,TotalIOs,KBytesTransferred
0
// This shows the basic metrics. Now we retreive the advanced metrics
instance get CIM_BlockStorageStatisticalData.? --pl InstanceID,ElementType,ReadIOs,ReadHitIOs,KBytesRead,WriteIOs,WriteHitIOs,KBytesWritten
0
// I repeated InstanceID and ElementType to verify the two queries are on the same element. We see the Advanced Metrics adds quite a few
// property values over the basic support.
// For the Front End Ports (type 6) we have:
instance get CIM_BlockStorageStatisticalData.? --pl InstanceID,ElementType,StatisticTime,TotalIOs,KBytesTransferred
1
// This shows the basic metrics. Now we retreive the advanced metrics
instance get CIM_BlockStorageStatisticalData.? --pl InstanceID,ElementType,IOTimeCounter
1
// We see the Advanced Metrics adds the IOTimeCounter statistic.
// For the Storage Volumes (type 8) we have:
instance get CIM_BlockStorageStatisticalData.? --pl InstanceID,ElementType,StatisticTime,TotalIOs,KBytesTransferred,ReadIOs,WriteIOs
3
// This shows the basic metrics. Now we retreive the advanced metrics
instance get CIM_BlockStorageStatisticalData.? --pl InstanceID,ElementType,IOTimeCounter,KBytesRead,KBytesWritten
3
// We see the Advanced Metrics adds the IOTimeCounter, KBytesRead and KBytesWritten statistics.
// For the Disk Drives (type 10) we have:
instance get CIM_BlockStorageStatisticalData.? --pl InstanceID,ElementType,StatisticTime,TotalIOs,KBytesTransferred,ReadIOs
4
// This shows the basic metrics. Now we retreive the advanced metrics
instance get CIM_BlockStorageStatisticalData.? --pl InstanceID,ElementType,IOTimeCounter,KBytesRead,WriteIOs,KBytesWritten,IdleTimeCounter
4
// The advance metrics add quite a few statistics. Actually, Advanced Metrics calls for EITHER the IOTimeCounter OR the IdleTimeCounter.

// One last thing to point out on the block server performance profile. The CIM_BlockStatisticsManifestCollection associated with 
// the Statistics Collection (see the shrub for the CIM_StatisticsCollection) contains manifests for each of the element types. There
// is some important information in these manifests. So, let's look at those manifests:
-o mof instance shrub CIM_BlockStatisticsManifestCollection.? --ac CIM_MemberOfCollection
// Here we see there are default manifests for each element type. So, let's look at one to illustrate what the manifest tells us:
-o mof instance get CIM_BlockStatisticsManifest.?
0
// The first thing we see is that the manifest contains a lot of "Include ..." properties. This tells us what statistics are kept for
// the element type. These are booleans. A value of true means the statistic is kept.
// Next there is the CSVSequence property. It tells what sequence the data should be ordered in a data record (this is unrelated to the
// sequence provided by CIM or pywbem or the pywbemcli). When the data is retreived and written to a file, the CSVSequence identifies
// the desired order of headers and values.


====================================================